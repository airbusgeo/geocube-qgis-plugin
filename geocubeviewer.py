# -*- coding: utf-8 -*-
"""
/***************************************************************************
 geocubeviewer
                                 A QGIS plugin
 Geocube XYZ Viewer
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-07-18
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Guillaume COLLOT
        email                : guillaume.collot@airbus.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import math
from datetime import datetime, date
from typing import List
from PyQt5.QtWidgets import QAbstractItemView, QGraphicsScene
from qgis._core import QgsApplication, QgsRectangle, QgsCoordinateReferenceSystem
from qgis.core import QgsRasterLayer, QgsProject, Qgis
import logging

from .utils import min_index_from_array, generate_graph, get_reproject_bounds
from .record_mapselect import RecordMapSelect
from .timeseries_mapselect import TimeSeriesMapSelect
from .geocubeclient import GeocubeClient
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from PyQt5 import QtGui
from PyQt5.QtCore import QDate

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .geocubeviewer_dialog import geocubeviewerDialog
import os.path

formatter = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logfilename = r'/tmp/geocubeviewer.log'
logging.basicConfig(filename=logfilename, level=logging.DEBUG, format=formatter)
logging.getLogger('matplotlib').setLevel(logging.INFO)


class DialogData:
    def __init__(self, record_idx, record_names, variable_name, instance_name, instance_id):
        self.record_idx = record_idx
        self.record_names = record_names
        self.variable_name = variable_name
        self.instance_name = instance_name
        self.instance_id = instance_id


class GeocubeViewer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.data_table = []
        self.x_list = []
        self.iface = iface
        self.canvas = self.iface.mapCanvas()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'geocubeviewer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&geocubeviewer')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        try:
            self.geocube_server = os.environ['GEOCUBE_SERVER']
            self.geocube_client_apikey = os.environ['GEOCUBE_CLIENTAPIKEY']
            self.geocube_auth_config_id = os.environ['GEOCUBE_AUTH_CONFIG_ID']
        except KeyError:
            logging.error('failed to found geocube server variable environment')
            iface.messageBar().pushMessage("Error",
                                           "Please reference GEOCUBE_SERVER, GEOCUBE_CLIENTAPIKEY and GEOCUBE_AUTH_CONFIG_ID vars environment",
                                           level=Qgis.Critical)

        self.geocube_client = GeocubeClient(geocube_server=self.geocube_server,
                                            geocube_client_apikey=self.geocube_client_apikey)
        self.geocube_auth_config_id = self.geocube_auth_config_id
        auth_manager = QgsApplication.authManager()
        configs = auth_manager.availableAuthMethodConfigs()
        for config in configs:
            if config == self.geocube_auth_config_id:
                configuration = configs[config]
                if not configuration.isValid():
                    logging.error('wrong authentication configuration')
                    iface.messageBar().pushMessage("Error",
                                                   "wrong authentication configuration",
                                                   level=Qgis.Critical)
                    pass
                else:
                    logging.debug("configuration found and valid")

        self.dialog = geocubeviewerDialog()
        self.dialog.addLayerPushButton.clicked.connect(self.add_single_layer)
        self.dialog.baseMapAddLayer.clicked.connect(self.add_basemap_layer)
        self.dialog.variablesComboBox.currentIndexChanged.connect(self.update_instances_list)
        self.dialog.searchRecordPushButton.clicked.connect(self.search_records)
        self.dialog.baseMapSearchButton.clicked.connect(self.search_records_basemap)
        self.dialog.selectOnMap.clicked.connect(self.select_record_on_map)
        self.dialog.selectTimeSeries.clicked.connect(self.select_time_series_on_map)
        self.dialog.resetButton.clicked.connect(self.reset)
        self.dialog.recordResult.clear()
        self.dialog.addTimeSeries.clicked.connect(self.add_on_map_layer)
        self.dialog.generateGraph.clicked.connect(self.re_generate_graph)

        self.model = QtGui.QStandardItemModel()
        self.dialog.recordList.setModel(self.model)
        self.dialog.recordList.setEditTriggers(QAbstractItemView.NoEditTriggers)

        self.baseMapModel = QtGui.QStandardItemModel()
        self.dialog.baseMapRecordsList.setModel(self.baseMapModel)
        self.dialog.baseMapRecordsList.setEditTriggers(QAbstractItemView.NoEditTriggers)

        self.onMapModel = QtGui.QStandardItemModel()
        self.dialog.onMapRecord.setModel(self.onMapModel)
        self.dialog.onMapRecord.setEditTriggers(QAbstractItemView.NoEditTriggers)

        self.record_map_select = RecordMapSelect(self.dialog, self.iface, self.canvas, self.geocube_client,
                                                 self.onMapModel)

        self.scene = QGraphicsScene()
        self.dialog.graphicsView.setScene(self.scene)

        self.time_series_map_select = TimeSeriesMapSelect(self.dialog, self.iface, self.canvas, self.scene,
                                                          self.geocube_client, self.geocube_auth_config_id,
                                                          self.geocube_server)

        self.dialog.progressBar.setTextVisible(True)
        self.dialog.progressBar.setRange(0, 100)
        self.dialog.progressBar.setValue(0)

        now = date.today()
        q_date = QDate(int(now.strftime("%Y")), int(now.strftime("%m")), int(now.strftime("%d")))
        self.dialog.timeSeriesEndDate.setDate(q_date)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('geocubeviewer', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/geocubeviewer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&geocubeviewer'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

        variables = self.geocube_client.list_variables()
        self.dialog.variablesComboBox.addItems([variable for variable in variables])

        self.dialog.limitRecordComboBox.clear()
        self.dialog.limitRecordComboBox.addItems(['No', '10', '50', '100'])

        # show the dialog
        self.dialog.show()

        # Run the dialog event loop
        result = self.dialog.exec_()

        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def add_single_layer(self):
        logging.debug("add_layer")
        dialog_data = self.get_dialog_data(self.dialog.recordList)

        logging.debug("configuration found and valid")
        xyz_Layer = QgsRasterLayer(
            'authcfg=' + self.geocube_auth_config_id + '&type=xyz&url=https://' + self.geocube_server + '/v1/catalog/mosaic/' + dialog_data.instance_id + '/%7Bx%7D/%7By%7D/%7Bz%7D/png?records.ids=' +
            dialog_data.record_idx[0],
            dialog_data.record_idx[0] + "_" + dialog_data.variable_name + "_" + dialog_data.instance_name, 'wms')
        rect = self.compute_record_rect(record_id=dialog_data.record_idx[0],
                                        record_name=dialog_data.record_names[0])
        xyz_Layer.setExtent(rect)
        srs = QgsCoordinateReferenceSystem()
        srs.createFromSrid(srid=3857)
        xyz_Layer.setCrs(srs=srs)
        if xyz_Layer.isValid():
            QgsProject.instance().addMapLayer(xyz_Layer)
            logging.info("layer added")
        else:
            logging.error("failed to add layer")

    def add_basemap_layer(self):
        logging.debug("add_layer_basemap")
        model = self.baseMapModel
        logging.info(model.rowCount())
        record_idx = []
        record_names = []
        for index in range(model.rowCount()):
            item = model.item(index)
            record_data = item.text()
            record_idx.append(record_data.split()[0])
            record_names.append(record_data.split()[2])
        dialog_data = self.get_dialog_data(self.dialog.baseMapRecordsList)

        params = []
        for record_id in record_idx:
            params.append('records.ids=' + record_id)
        separator = '%26'  # & encode
        query = separator.join(params)
        xyz_Layer = QgsRasterLayer(
            'authcfg=' + self.geocube_auth_config_id + '&type=xyz&url=https://' + self.geocube_server + '/v1/catalog/mosaic/' + dialog_data.instance_id + '/%7Bx%7D/%7By%7D/%7Bz%7D/png?' + query,
            'basemap' + "_" + dialog_data.variable_name + "_" + dialog_data.instance_name, 'wms')
        xyz_Layer.setExtent(self.compute_records_rect(record_ids=record_idx, record_names=record_names))
        srs = QgsCoordinateReferenceSystem()
        srs.createFromSrid(srid=3857)
        xyz_Layer.setCrs(srs=srs)
        if xyz_Layer.isValid():
            QgsProject.instance().addMapLayer(xyz_Layer)
            logging.info("layer added")
        else:
            logging.error("failed to add layer")

    def add_on_map_layer(self):
        logging.debug("add_layer_on_map")
        dialog_data = self.get_dialog_data(self.dialog.onMapRecord)

        for index in range(len(dialog_data.record_idx)):
            logging.debug("add layer for record " + dialog_data.record_idx[index])
            xyz_Layer = QgsRasterLayer(
                'authcfg=' + self.geocube_auth_config_id + '&type=xyz&url=https://' + self.geocube_server + '/v1/catalog/mosaic/' + dialog_data.instance_id + '/%7Bx%7D/%7By%7D/%7Bz%7D/png?records.ids=' +
                dialog_data.record_idx[index],
                dialog_data.record_idx[index] + "_" + dialog_data.variable_name + "_" + dialog_data.instance_name,
                'wms')
            xyz_Layer.setExtent(self.compute_record_rect(record_id=dialog_data.record_idx[index],
                                                         record_name=dialog_data.record_names[index]))
            srs = QgsCoordinateReferenceSystem()
            srs.createFromSrid(srid=3857)
            xyz_Layer.setCrs(srs=srs)
            if xyz_Layer.isValid():
                QgsProject.instance().addMapLayer(xyz_Layer)
                logging.info("layer added")
            else:
                logging.error("failed to add layer")

    def search_records(self):
        self.model.clear()
        dialog = self.dialog
        record_name = str(dialog.recordTextEdit.toPlainText())
        logging.debug("search records for key: " + record_name)
        records = self.geocube_client.list_records(name=record_name)
        if len(records) == 0:
            logging.debug("no records found")
            dialog.recordResult.setText("No records found.")
            dialog.recordResult.adjustSize()
        elif len(records) == 1:
            logging.debug("1 record found")
            dialog.recordResult.setText("One record found.")
            dialog.recordResult.adjustSize()
            item = QtGui.QStandardItem(records[0].format())
            self.model.appendRow(item)
        else:
            dialog.recordResult.setText("More than one record found, please select the right record.")
            for record in records:
                item = QtGui.QStandardItem(record.format())
                self.model.appendRow(item)

    def search_records_basemap(self):
        self.baseMapModel.clear()
        dialog = self.dialog
        from_date = dialog.fromDate.dateTime()
        to_date = dialog.toDate.dateTime()
        limit_str = dialog.limitRecordComboBox.currentText()
        limit = 5000
        if limit_str != 'No':
            limit = int(limit_str)

        tags_str = str(dialog.tagsList.toPlainText())
        tags = {}
        if tags_str != "":
            tags_value = tags_str.split(",")
            for value in tags_value:
                s = value.split(":")
                tags[s[0]] = s[1]
            logging.debug(tags)
        if from_date > to_date:
            self.iface.messageBar().pushMessage("Error", "Wrong date input: Start Date must be before End Date",
                                                level=Qgis.Critical)
            pass

        to_time = datetime.strptime(to_date.toString('yyyy-MM-dd HH:mm:ss'), "%Y-%m-%d %H:%M:%S")
        from_time = datetime.strptime(from_date.toString('yyyy-MM-dd HH:mm:ss'), "%Y-%m-%d %H:%M:%S")

        records = self.geocube_client.list_records(to_time=to_time, from_time=from_time, tags=tags, limit=limit)
        logging.debug('Records found: ' + str(len(records)))
        dialog.basemapResult.setText('Records found: ' + str(len(records)))
        dialog.basemapResult.adjustSize()
        for record in records:
            item = QtGui.QStandardItem(record.format())
            self.baseMapModel.appendRow(item)

    def update_instances_list(self):
        variable_name = str(self.dialog.variablesComboBox.currentText())
        logging.info("update instance list for variables: " + variable_name)
        instances = self.geocube_client.list_instance_from_variable(variable_name=variable_name)
        logging.info("instances list", instances)
        self.dialog.instanceComboBox.clear()
        self.dialog.instanceComboBox.addItems([instance for instance in instances])

    def compute_record_rect(self, record_id: str, record_name: str) -> QgsRectangle:
        wkt = self.geocube_client.get_aoi_from_record(record_name=record_name, record_id=record_id)
        bounds = get_reproject_bounds(wkt)
        return QgsRectangle(bounds[0], bounds[1], bounds[2], bounds[3])

    def compute_records_rect(self, record_ids: List[str], record_names: List[str]) -> QgsRectangle:
        min_x = math.inf
        min_y = math.inf
        max_x = -math.inf
        max_y = -math.inf
        for i in range(len(record_ids)):
            wkt = self.geocube_client.get_aoi_from_record(record_name=record_names[i], record_id=record_ids[i])
            bounds = get_reproject_bounds(wkt)
            min_x = min(bounds[0], min_x)
            min_y = min(bounds[1], min_y)
            max_x = max(bounds[2], max_x)
            max_y = max(bounds[3], max_y)
        return QgsRectangle(min_x, min_y, max_x, max_y)

    def select_record_on_map(self):
        logging.info("select on map!")
        self.dialog.positionOnMap.clear()
        self.canvas.setMapTool(self.record_map_select)

    def select_time_series_on_map(self):
        logging.info("select on map!")
        self.canvas.setMapTool(self.time_series_map_select)

    def reset(self):
        logging.info("Reset Selection")
        self.model.clear()
        self.baseMapModel.clear()
        self.onMapModel.clear()
        self.dialog.recordTextEdit.clear()
        self.dialog.tagsList.clear()
        self.dialog.recordResult.clear()
        self.dialog.basemapResult.clear()
        self.dialog.onmapResult.clear()
        self.scene.clear()

    def get_dialog_data(self, list) -> DialogData:
        record_idx = []
        record_names = []
        for index in list.selectedIndexes():
            item = list.model().itemFromIndex(index)
            record_data = item.text()
            record_idx.append(record_data.split()[0])
            record_names.append(record_data.split()[2])
        instance_name = self.dialog.instanceComboBox.currentText()
        variable_name = self.dialog.variablesComboBox.currentText()
        instance_id = self.geocube_client.get_instance_id(variable_name=variable_name, instance_name=instance_name)
        return DialogData(record_idx=record_idx, instance_id=instance_id, instance_name=instance_name,
                          record_names=record_names, variable_name=variable_name)

    def re_generate_graph(self):
        logging.debug("re generate graph")
        figure, self.x_list, self.data_table = generate_graph(self.dialog, self.scene, self.iface, self.geocube_client)
        figure.canvas.mpl_connect('button_press_event', self.onclick)

    def onclick(self, event):
        logging.debug('%s click: button=%d, x=%d, y=%d, xdata=%f, ydata=%f' %
                      ('double' if event.dblclick else 'single', event.button,
                       event.x, event.y, event.xdata, event.ydata))
        x_coord = event.xdata
        min_index = min_index_from_array(self.x_list, x_coord)
        self.dialog.graphicTableView.selectRow(min_index)

        record_id = self.data_table[min_index][0]
        record_name = self.data_table[min_index][1]

        instance_name = self.dialog.instanceComboBox.currentText()
        variable_name = self.dialog.variablesComboBox.currentText()
        instance_id = self.geocube_client.get_instance_id(variable_name=variable_name, instance_name=instance_name)
        logging.info(instance_id)

        layers = QgsProject.instance().mapLayersByName(layerName="graph_layer_view")
        if len(layers) > 0:
            for layer in layers:
                logging.debug("layer already exist")
                layer.setDataSource(
                    dataSource='authcfg=' + self.geocube_auth_config_id + '&type=xyz&url=https://' + self.geocube_server + '/v1/catalog/mosaic/' + instance_id + '/%7Bx%7D/%7By%7D/%7Bz%7D/png?records.ids=' +
                               record_id, baseName="graph_layer_view", provider="wms",
                    options=layer.dataProvider().ProviderOptions())
                logging.debug("layer updated")
                return

        xyz_Layer = QgsRasterLayer(
            'authcfg=' + self.geocube_auth_config_id + '&type=xyz&url=https://' + self.geocube_server + '/v1/catalog/mosaic/' + instance_id + '/%7Bx%7D/%7By%7D/%7Bz%7D/png?records.ids=' +
            record_id,
            "graph_layer_view", 'wms')
        xyz_Layer.setExtent(self.compute_record_rect(record_id=record_id,
                                        record_name=record_name))
        srs = QgsCoordinateReferenceSystem()
        srs.createFromSrid(srid=3857)
        xyz_Layer.setCrs(srs=srs)
        if xyz_Layer.isValid():
            QgsProject.instance().addMapLayer(xyz_Layer)
            logging.info("layer added")
        else:
            logging.error("failed to add layer")
